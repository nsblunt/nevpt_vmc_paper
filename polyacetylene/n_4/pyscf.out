('n:', 4)
atomString:
C 0.725 0.0 0.0;
C -0.725 -0.0 -0.0;
C 1.395 1.16047404107 0.0;
C -1.395 -1.16047404107 -0.0;
H 1.265 -0.935307436087 0.0;
H -1.265 0.935307436087 -0.0;
C 2.845 1.16047404107 0.0;
C -2.845 -1.16047404107 -0.0;
H 0.855 2.09578147716 0.0;
H -0.855 -2.09578147716 -0.0;
C 3.515 2.32094808214 0.0;
C -3.515 -2.32094808214 -0.0;
H 3.385 0.225166604984 0.0;
H -3.385 -0.225166604984 -0.0;
H 4.595 2.32094808214 0.0;
H -4.595 -2.32094808214 -0.0;
H 2.975 3.25625551823 0.0;
H -2.975 -3.25625551823 -0.0;

#INFO: **** input file is /state/partition1/nsb37/158180/prepVMC.py ****
import numpy as np
from pyscf import gto, scf, ao2mo, mcscf, tools, fci, mp, symm, lib
from pyscf.shciscf import shci
import math, os, time, sys
#import NEVPT2Helper as nev

def myocc(mf):
   mol = mf.mol
   irrep_id = mol.irrep_id
   so = mol.symm_orb
   orbsym = symm.label_orb_symm(mol, irrep_id, so, mf.mo_coeff)
   doccsym = np.array(orbsym)[mf.mo_occ==2]
   soccsym = np.array(orbsym)[mf.mo_occ==1]
   for ir, irname in enumerate(mol.irrep_name):
     print('%s, double-occ = %d, single-occ = %d' %
         (irname, sum(doccsym==ir), sum(soccsym==ir)))

# trans-polyacetylene: C_{2n}H_{2n+2}
if len(sys.argv) == 2:
    n = int(sys.argv[1])
else:
    n = 2

print("n:", n)

# bond lengths and angles (assuming uniform c=c, c-c and c-h bond lengths, and all angles to be 120 degrees)
b1 = 1.45
b2 = 1.34
bh = 1.08
t = 2*np.pi/3

if n%2 == 0:
  # vector displacements on one side
  c0 = np.array([b1/2, 0., 0.])
  cs = np.array([b1, 0., 0.])
  cd = np.array([b2/2, b2*3**0.5/2, 0.])
  ch = np.array([bh/2, -bh*3**0.5/2, 0.])
  cht = np.array([bh, 0., 0.])

  #atomString = f'C {c0[0]} {c0[1]} {c0[2]};\nC {-c0[0]} {-c0[1]} {-c0[2]};\n'
  atomString = 'C {} {} {};\nC {} {} {};\n'.format(c0[0], c0[1], c0[2], -c0[0], -c0[1], -c0[2])
  currentC = c0
  for i in range(n-1):
      if i%2 == 0:
          newC = currentC + cd
          newH = currentC + ch
      else:
          newC = currentC + cs
          newH = currentC - ch
      #atomString += f'C {newC[0]} {newC[1]} {newC[2]};\nC {-newC[0]} {-newC[1]} {-newC[2]};\n'
      #atomString += f'H {newH[0]} {newH[1]} {newH[2]};\nH {-newH[0]} {-newH[1]} {-newH[2]};\n'
      atomString += 'C {} {} {};\nC {} {} {};\n'.format(newC[0], newC[1], newC[2], -newC[0], -newC[1], -newC[2])
      atomString += 'H {} {} {};\nH {} {} {};\n'.format(newH[0], newH[1], newH[2], -newH[0], -newH[1], -newH[2])
      currentC = newC

  # terminal h's
  th1 = currentC + cht
  th2 = currentC - ch
  #atomString += f'H {th1[0]} {th1[1]} {th1[2]};\nH {-th1[0]} {-th1[1]} {-th1[2]};\n'
  #atomString += f'H {th2[0]} {th2[1]} {th2[2]};\nH {-th2[0]} {-th2[1]} {-th2[2]};\n'
  atomString += 'H {} {} {};\nH {} {} {};\n'.format(th1[0], th1[1], th1[2], -th1[0], -th1[1], -th1[2])
  atomString += 'H {} {} {};\nH {} {} {};\n'.format(th2[0], th2[1], th2[2], -th2[0], -th2[1], -th2[2])

else:
  # vector displacements on one side
  c0 = np.array([b2/2, 0., 0.])
  cd = np.array([b2, 0., 0.])
  cs = np.array([b1/2, b1*3**0.5/2, 0.])
  ch = np.array([bh/2, -bh*3**0.5/2, 0.])
  cht = np.array([bh/2, bh*3**0.5/2, 0.])

  #atomString = f'C {c0[0]} {c0[1]} {c0[2]};\nC {-c0[0]} {-c0[1]} {-c0[2]};\n'
  atomString = 'C {} {} {};\nC {} {} {};\n'.format(c0[0], c0[1], c0[2], -c0[0], -c0[1], -c0[2])
  currentC = c0
  for i in range(n-1):
      if i%2 == 0:
          newC = currentC + cs
          newH = currentC + ch
      else:
          newC = currentC + cd
          newH = currentC - ch
      #atomString += f'C {newC[0]} {newC[1]} {newC[2]};\nC {-newC[0]} {-newC[1]} {-newC[2]};\n'
      #atomString += f'H {newH[0]} {newH[1]} {newH[2]};\nH {-newH[0]} {-newH[1]} {-newH[2]};\n'
      atomString += 'C {} {} {};\nC {} {} {};\n'.format(newC[0], newC[1], newC[2], -newC[0], -newC[1], -newC[2])
      atomString += 'H {} {} {};\nH {} {} {};\n'.format(newH[0], newH[1], newH[2], -newH[0], -newH[1], -newH[2])
      currentC = newC

  # terminal h's
  th1 = currentC + cht
  th2 = currentC + ch
  #atomString += f'H {th1[0]} {th1[1]} {th1[2]};\nH {-th1[0]} {-th1[1]} {-th1[2]};\n'
  #atomString += f'H {th2[0]} {th2[1]} {th2[2]};\nH {-th2[0]} {-th2[1]} {-th2[2]};\n'
  atomString += 'H {} {} {};\nH {} {} {};\n'.format(th1[0], th1[1], th1[2], -th1[0], -th1[1], -th1[2])
  atomString += 'H {} {} {};\nH {} {} {};\n'.format(th2[0], th2[1], th2[2], -th2[0], -th2[1], -th2[2])

print("atomString:")
print(atomString)

mol = gto.M(atom = atomString, basis = '6-31g', verbose = 4, unit = 'angstrom', symmetry = 1, spin = 0)
mf = scf.RHF(mol)
mf.max_cycle = 500
mf.chkfile = '{}_HF.chk'.format(n)
mf.kernel()

# shciscf
norbAct = 2*n
nelecAct = 2*n
mc = shci.SHCISCF(mf, norbAct, nelecAct)
mc.chkfile = '{}_SHCISCF.chk'.format(n)

# for icpt integrals uncomment the following and comment out the mc calculation, FCIDUMP generation, etc.
#chkfile = f'{n}_SHCISCF.chk'
#mc.__dict__.update(lib.chkfile.load(chkfile, 'mcscf'))

# pi system active space
mo = mc.sort_mo_by_irrep({'Ag': 0,'Bu': 0,'Au': n,'Bg': n}, {'Ag': 3*n+1,'Bu': 3*n,'Au': 0,'Bg': 0})

# these need to be adjusted with system size
mc.fcisolver.sweep_iter = [0, 2, 4]
mc.fcisolver.sweep_epsilon = [1e-3, 1e-4, 5e-5]
mc.fcisolver.nPTiter = 0
mc.max_cycle_macro = 20
#mc.internal_rotation = True
mc.fcisolver.nPTiter = 0  # Turns off PT calculation, i.e. no PTRDM.
#mc.fcisolver.mpiprefix = "mpirun -np 24"
#mc.fcisolver.prefix = "/rc_scratch/anma2640/polyacetylene"
mc.kernel(mo)

# prep nevpt

norbFrozen = 2*n
norbCore = 6*n + 1

fileh = open("moEne.txt", 'w')
for i in range(mol.nao - norbFrozen):
  fileh.write('%.12e\n'%(mc.mo_energy[i + norbFrozen]))
fileh.close()

tools.fcidump.from_mc(mc, 'FCIDUMP.h5', nFrozen = norbFrozen)

# active space integrals for dice calculation
mo_core = mc.mo_coeff[:,:norbCore]
mo_rest = mc.mo_coeff[:,norbCore:norbCore + norbAct]
core_dm = 2 * mo_core.dot(mo_core.T)
corevhf = mc.get_veff(mol, core_dm)
energy_core = mol.energy_nuc()
energy_core += np.einsum('ij,ji', core_dm, mc.get_hcore())
energy_core += np.einsum('ij,ji', core_dm, corevhf) * .5
h1eff = mo_rest.T.dot(mc.get_hcore() + corevhf).dot(mo_rest)
eri = ao2mo.kernel(mol, mo_rest)
tools.fcidump.from_integrals('FCIDUMP', h1eff, eri, norbAct, nelecAct, energy_core)

#this is the scratch file for writing potentially larger integral files
#intfolder = "int/"
#os.system("mkdir -p "+intfolder)
##
#
#dm2a = np.zeros((norb, norb, norb, norb))
#file2pdm = "spatialRDM.0.0.txt"
#file2pdm = file2pdm.encode()  # .encode for python3 compatibility
#shci.r2RDM(dm2a, norb, file2pdm)
#dm1 = np.einsum('ikjj->ki', dm2a)
#dm1 /= (nelec - 1)
##dm1, dm2a = mc.fcisolver.make_rdm12(0, mc.ncas, mc.nelecas)
#dm2 = np.einsum('ijkl->ikjl', dm2a)
##
#np.save(intfolder+"E2.npy", np.asfortranarray(dm2))
#np.save(intfolder+"E1.npy", np.asfortranarray(dm1))
##
#print ("trace of 2rdm", np.einsum('ijij',dm2))
#print ("trace of 1rdm", np.einsum('ii',dm1))
##
#E1eff = dm1 #for state average
#nev.writeNEVPTIntegrals(mc, dm1, dm2, E1eff, norbFrozen, intfolder)
#nev.write_ic_inputs(mc.nelecas[0]+mc.nelecas[1], mc.ncore, mc.ncas, norbFrozen, mc.nelecas[0]-mc.nelecas[1],
#                   'NEVPT2')
#INFO: ******************** input file end ********************


System: ('Linux', 'compute-0-19.local', '2.6.32-504.16.2.el6.x86_64', '#1 SMP Wed Apr 22 06:48:29 UTC 2015', 'x86_64', 'x86_64')  Threads 12
Python 2.7.15 |Anaconda, Inc.| (default, May  1 2018, 23:32:55) 
[GCC 7.2.0]
numpy 1.15.1  scipy 1.1.0
Date: Fri May 22 09:33:56 2020
PySCF version 1.7.1
PySCF path  /home/nsb37/pyscf/pyscf
GIT ORIG_HEAD f9a419e89c2fa6ea63cd0445a6fc1dde4109b47b
GIT HEAD      ref: refs/heads/master
GIT master branch  97008722ba492c9d60fa46535f156620355ae933

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 18
[INPUT] num. electrons = 58
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry 1 subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 C      0.725000000000   0.000000000000   0.000000000000 AA    1.370051440310   0.000000000000   0.000000000000 Bohr
[INPUT]  2 C     -0.725000000000   0.000000000000   0.000000000000 AA   -1.370051440310   0.000000000000   0.000000000000 Bohr
[INPUT]  3 C      1.395000000000   1.160474041070   0.000000000000 AA    2.636167943768   2.192978112290   0.000000000000 Bohr
[INPUT]  4 C     -1.395000000000  -1.160474041070   0.000000000000 AA   -2.636167943768  -2.192978112290   0.000000000000 Bohr
[INPUT]  5 H      1.265000000000  -0.935307436087   0.000000000000 AA    2.390503547575  -1.767474896474   0.000000000000 Bohr
[INPUT]  6 H     -1.265000000000   0.935307436087   0.000000000000 AA   -2.390503547575   1.767474896474   0.000000000000 Bohr
[INPUT]  7 C      2.845000000000   1.160474041070   0.000000000000 AA    5.376270824388   2.192978112290   0.000000000000 Bohr
[INPUT]  8 C     -2.845000000000  -1.160474041070   0.000000000000 AA   -5.376270824388  -2.192978112290   0.000000000000 Bohr
[INPUT]  9 H      0.855000000000   2.095781477160   0.000000000000 AA    1.615715836503   3.960453008769   0.000000000000 Bohr
[INPUT] 10 H     -0.855000000000  -2.095781477160   0.000000000000 AA   -1.615715836503  -3.960453008769   0.000000000000 Bohr
[INPUT] 11 C      3.515000000000   2.320948082140   0.000000000000 AA    6.642387327846   4.385956224579   0.000000000000 Bohr
[INPUT] 12 C     -3.515000000000  -2.320948082140   0.000000000000 AA   -6.642387327846  -4.385956224579   0.000000000000 Bohr
[INPUT] 13 H      3.385000000000   0.225166604984   0.000000000000 AA    6.396722931653   0.425503215818   0.000000000000 Bohr
[INPUT] 14 H     -3.385000000000  -0.225166604984   0.000000000000 AA   -6.396722931653  -0.425503215818   0.000000000000 Bohr
[INPUT] 15 H      4.595000000000   2.320948082140   0.000000000000 AA    8.683291542376   4.385956224579   0.000000000000 Bohr
[INPUT] 16 H     -4.595000000000  -2.320948082140   0.000000000000 AA   -8.683291542376  -4.385956224579   0.000000000000 Bohr
[INPUT] 17 H      2.975000000000   3.256255518230   0.000000000000 AA    5.621935220581   6.153431121058   0.000000000000 Bohr
[INPUT] 18 H     -2.975000000000  -3.256255518230   0.000000000000 AA   -5.621935220581  -6.153431121058   0.000000000000 Bohr

nuclear repulsion = 301.137232869959
point group symmetry = C2h
num. orbitals of irrep Ag = 38
num. orbitals of irrep Bg = 8
num. orbitals of irrep Au = 8
num. orbitals of irrep Bu = 38
number of shells = 60
number of NR pGTOs = 216
number of NR cGTOs = 92
basis = 6-31g
ecp = {}
CPU time:         0.54


******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 500
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = 4_HF.chk
max_memory 4000 MB (current use 62 MB)
Freeze 0 electrons in irreps []
    58 free electrons in irreps Ag Bg Au Bu
Set gradient conv threshold to 3.16228e-05
init E= -310.549941684519
HOMO (Bg) = -0.173500559392736  LUMO (Au) = -0.0209915007056667
cycle= 1 E= -308.501510609211  delta_E= 2.05  |g|= 0.408  |ddm|= 3.81
HOMO (Bg) = -0.271683363124802  LUMO (Au) = 0.0582830127652068
cycle= 2 E= -308.571685412841  delta_E= -0.0702  |g|= 0.112  |ddm|= 0.787
HOMO (Bg) = -0.25623940529594  LUMO (Au) = 0.0879973147821268
cycle= 3 E= -308.577288228699  delta_E= -0.0056  |g|= 0.0438  |ddm|= 0.262
HOMO (Bg) = -0.264501508860045  LUMO (Au) = 0.0833164814265258
cycle= 4 E= -308.577931672849  delta_E= -0.000643  |g|= 0.00862  |ddm|= 0.0645
HOMO (Bg) = -0.26607663982782  LUMO (Au) = 0.0836711480951935
cycle= 5 E= -308.577981350046  delta_E= -4.97e-05  |g|= 0.00263  |ddm|= 0.0161
HOMO (Bg) = -0.265947569610649  LUMO (Au) = 0.0847127652383669
cycle= 6 E= -308.577987702223  delta_E= -6.35e-06  |g|= 0.000603  |ddm|= 0.00649
HOMO (Bg) = -0.26610761169605  LUMO (Au) = 0.0848185967444317
cycle= 7 E= -308.577988061012  delta_E= -3.59e-07  |g|= 0.000264  |ddm|= 0.00181
HOMO (Bg) = -0.266142588126715  LUMO (Au) = 0.0848166291975671
cycle= 8 E= -308.577988083588  delta_E= -2.26e-08  |g|= 3.44e-05  |ddm|= 0.000346
HOMO (Bg) = -0.266146550282415  LUMO (Au) = 0.0848145537657718
cycle= 9 E= -308.577988084247  delta_E= -6.59e-10  |g|= 7.36e-06  |ddm|= 0.000109
HOMO (Bg) = -0.266147317316255  LUMO (Au) = 0.0848142124970272
Extra cycle  E= -308.577988084284  delta_E= -3.66e-11  |g|= 3.74e-06  |ddm|= 1.63e-05
converged SCF energy = -308.577988084284
ncore for each irreps {'Bu': 12, 'Bg': 0, 'Au': 0, 'Ag': 13}
ncas for each irreps {'Bu': 0, 'Bg': 4, 'Au': 4, 'Ag': 0}
(0-based) caslst = [25 26 27 28 29 30 32 34]

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (4e+4e, 8o), ncore = 25, nvir = 59
max_cycle_macro = 20
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = 4_SHCISCF.chk
max_memory 4000 MB (current use 145 MB)
internal_rotation = False

******** SHCI flags ********
executable             = /home/nsb37/Dice_github/Dice
mpiprefix              = mpirun
scratchDirectory       = /scratch/nsb37/158180/TMPDIR/18716
integralFile           = ./FCIDUMP
configFile             = ./input.dat
outputFile             = ./output.dat
maxIter                = 6
sweep_iter             = [    0,    2,    4]
sweep_epsilon          = [0.001,0.0001,5e-05]
nPTiter                = 0
Stochastic             = True
restart                = False
fullrestart            = False
num_thrds              = 1
memory                 = None

Active space CI wfn symmetry = Ag
CASCI E = -308.664489476442  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (21 JK  4 micro), CASSCF E = -308.693943698587  dE = -0.029454222  S^2 = 0.0000000
               |grad[o]|=0.0568  |grad[c]|= None  |ddm|=0.0666
macro iter 2 (11 JK  4 micro), CASSCF E = -308.695347863282  dE = -0.0014041647  S^2 = 0.0000000
               |grad[o]|=0.0177  |grad[c]|= None  |ddm|=0.0137
macro iter 3 (3 JK  1 micro), CASSCF E = -308.69534789953  dE = -3.6248139e-08  S^2 = 0.0000000
               |grad[o]|=8.7e-05  |grad[c]|= None  |ddm|=    0
1-step CASSCF converged in 3 macro (35 JK 9 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.94009507 1.92535474 1.89445838 1.83788589 0.167744   0.105532
 0.07207828 0.05685162]
CASSCF energy = -308.69534789953
CASCI E = -308.69534789953  E(CI) = -8.70950334552219  S^2 = 0.0000000
